#!/bin/sh

# TODO If "ip" command available, use "ip address show"
IP_LIST_COMMAND="ifconfig"

if [ "$1" = "--debug" ] ; then
	DEBUG="1"
	shift
fi

if [ "${1:---help}" = "--help" ] ; then
	echo "Usage: $0 [--debug] (rule)+" >&2
	echo "    --debug    Enables debug logging for rule evaluation"
	echo ""
	echo "Rule syntax: (ip fragment|else) (tcp|ssh) (dest)"
	echo "  Dest syntax for tcp: host:port"
	echo "  Dest syntax for ssh: ssh_jump_host:dest_host:dest_port"
	exit 1
fi

function do_connect() {
	PROTO="$1"
	DEST="$2"
	
	if [ -n "$DEBUG" ] ; then
		echo "Connecting: $PROTO $DEST" >&2
	fi
	
	if [ "$PROTO" = "tcp" ] ; then
		exec nc $(echo "$DEST" | tr ':' ' ')
	else
		DEST_SSH_HOST=$(echo "$DEST" | cut -d':' -f1)
		DEST_SOCKET=$(echo "$DEST" | cut -d':' -f2-)
		exec ssh $DEST_SSH_HOST -W $DEST_SOCKET
	fi
}

while [ -n "$1" ]
do
	NETRULE="$1"
	PROTO="$2"
	DEST="$3"
	shift 3
	
	if [ -z "$PROTO" ] ; then
		echo "Malformed rule: missing protocol! $NETRULE $PROTO $DEST\nExpected: (ip fragment|else) (tcp|ssh) (host[:port])" >&2
		exit 2
	elif [ -z "$DEST" ] ; then
		echo "Malformed rule: missing destination! $NETRULE $PROTO $DEST\nExpected: (ip fragment|else) (tcp|ssh) (host[:port])" >&2
		exit 2
	fi
	
	if [ -n "$DEBUG" ] ; then
		echo "Evaluate rule: $NETRULE $PROTO $DEST" >&2
	fi
	
	if [ "$NETRULE" = "else" ] ; then
		do_connect $PROTO $DEST
	else
		if [ $($IP_LIST_COMMAND | grep -F -e "inet $NETRULE" -e "inet6 $NETRULE" 2>/dev/null | wc -l) -gt 0 ] ; then
			do_connect $PROTO $DEST
		elif [ -n "$DEBUG" ] ; then
			echo "ifconfig does not have 'inet $NETRULE'" >&2
		fi
	fi
done

echo "No rule matched!" >&2
exit 1